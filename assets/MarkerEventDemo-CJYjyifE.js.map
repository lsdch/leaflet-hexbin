{"version":3,"file":"MarkerEventDemo-CJYjyifE.js","sources":["../../src/views/MarkerEventDemo.vue"],"sourcesContent":["<template>\n  <div class=\"marker-event__map-wrapper\">\n    <l-map :useGlobalLeaflet=\"true\" :zoom=\"8\" :center=\"[50.4, 30.5]\">\n      <l-tile-layer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        layer-type=\"base\"\n        name=\"OpenStreetMap\"\n      />\n      <l-hexbin-layer\n        :data\n        :duration=\"200\"\n        :radius-range=\"[2, 14]\"\n        :hover-handler=\"\n          HexbinHoverHandler.compound([\n            HexbinHoverHandler.tooltip({\n              tooltipContent(d) {\n                return `Count: ${d.length}`\n              },\n            }),\n            HexbinHoverHandler.resizeScale(1.5),\n          ])\n        \"\n      >\n      </l-hexbin-layer>\n    </l-map>\n  </div>\n  <div class=\"marker-event\">\n    <template v-for=\"(event, idx) in eventList\" :key=\"idx\">{{ event }}<br /></template>\n  </div>\n  <!-- <div class=\"marker-event__switch\">\n    <v-switch\n      v-for=\"event in events\"\n      :disabled=\"event === 'ready'\"\n      :key=\"event\"\n      :label=\"event\"\n      :value=\"event\"\n      color=\"blue\"\n      v-model=\"activeEvents\"\n      hide-details\n    />\n  </div> -->\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport { LMap, LTileLayer, LMarker } from '@vue-leaflet/vue-leaflet'\nimport { LHexbinLayer, HexbinHoverHandler } from 'vue-leaflet-hexbin'\n\nimport L, { type LatLngExpression } from 'leaflet'\n\n// import { LMarkerClusterGroup } from '../../components/index'\n// import { markerClusterGroupEvents } from '../../functions/markerClusterGroup'\n\n// const events = JSON.parse(JSON.stringify(markerClusterGroupEvents))\n\nconst data = ref<LatLngExpression[]>([\n  [50, 30],\n  [50.6, 30.1],\n  [50.7, 30.2],\n  [50.1, 30.3],\n])\n\nconst activeEvents = ref([\n  'ready',\n  'click',\n  'clusterclick',\n  'clustermouseover',\n  'spiderfied',\n  'unspiderfied',\n])\nconst eventList = ref<string[]>([])\nconst logger = (type: string) => {\n  var m = new Date()\n  var date =\n    ('0' + m.getUTCHours()).slice(-2) +\n    ':' +\n    ('0' + m.getUTCMinutes()).slice(-2) +\n    ':' +\n    ('0' + m.getUTCSeconds()).slice(-2)\n\n  eventList.value.unshift(`(${date}) Fired Event: ${type}`)\n}\n\nconst eventHandler = computed(() => {\n  const events = {}\n  activeEvents.value.forEach((key) => {\n    // @ts-ignore\n    events[key] = () => logger(key)\n  })\n  return events\n})\n</script>\n\n<style>\n.marker-event {\n  line-height: 24px;\n  font-size: 16px;\n  height: 128px;\n  width: 100%;\n  background-color: #151515;\n  border-radius: 5px;\n  overflow-y: scroll;\n  padding: 8px;\n  color: #fff;\n  font-family: monospace;\n  white-space: normal;\n}\n\n.marker-event__switch {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n\n.marker-event__switch > div {\n  width: 200px;\n}\n\n.marker-event__map-wrapper {\n  height: 50vh;\n  width: 100%;\n  border-radius: 5px;\n  overflow: hidden;\n}\n</style>\n"],"names":["data","ref","activeEvents","eventList","logger","type","m","date","computed","events","key"],"mappings":"gWAuDA,MAAMA,EAAOC,EAAwB,CACnC,CAAC,GAAI,EAAE,EACP,CAAC,KAAM,IAAI,EACX,CAAC,KAAM,IAAI,EACX,CAAC,KAAM,IAAI,CAAA,CACZ,EAEKC,EAAeD,EAAI,CACvB,QACA,QACA,eACA,mBACA,aACA,cAAA,CACD,EACKE,EAAYF,EAAc,EAAE,EAC5BG,EAAUC,GAAiB,CAC3B,IAAAC,MAAQ,KACRC,GACD,IAAMD,EAAE,YAAA,GAAe,MAAM,EAAE,EAChC,KACC,IAAMA,EAAE,iBAAiB,MAAM,EAAE,EAClC,KACC,IAAMA,EAAE,cAAA,GAAiB,MAAM,EAAE,EAEpCH,EAAU,MAAM,QAAQ,IAAII,CAAI,kBAAkBF,CAAI,EAAE,CAC1D,EAEqB,OAAAG,EAAS,IAAM,CAClC,MAAMC,EAAS,CAAC,EACH,OAAAP,EAAA,MAAM,QAASQ,GAAQ,CAElCD,EAAOC,CAAG,EAAI,IAAMN,EAAOM,CAAG,CAAA,CAC/B,EACMD,CACR,CAAA"}