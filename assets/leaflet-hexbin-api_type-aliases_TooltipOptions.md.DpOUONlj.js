import{_ as e,c as o,o as a,aJ as i}from"./chunks/framework.BvC-JhCI.js";const b=JSON.parse('{"title":"Type Alias: TooltipOptions<Data>","description":"","frontmatter":{},"headers":[],"relativePath":"leaflet-hexbin-api/type-aliases/TooltipOptions.md","filePath":"leaflet-hexbin-api/type-aliases/TooltipOptions.md"}'),n={name:"leaflet-hexbin-api/type-aliases/TooltipOptions.md"};function l(p,t,r,s,c,d){return a(),o("div",null,t[0]||(t[0]=[i('<p><a href="./../globals.html">leaflet-hexbin</a> / TooltipOptions</p><h1 id="type-alias-tooltipoptions-data" tabindex="-1">Type Alias: TooltipOptions&lt;Data&gt; <a class="header-anchor" href="#type-alias-tooltipoptions-data" aria-label="Permalink to &quot;Type Alias: TooltipOptions\\&lt;Data\\&gt;&quot;">​</a></h1><blockquote><p><strong>TooltipOptions</strong>&lt;<code>Data</code>&gt;: <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/lsdch/leaflet-hexbin/blob/b3db042a3141108eeab0978b57883d6ccab557d2/packages/leaflet-hexbin/src/HexbinLayer.ts#L23" target="_blank" rel="noreferrer">HexbinLayer.ts:23</a></p><p>Tooltip definition for the hexbin layer. This can be used to generate a tooltip for each hexbin, if an external tooltip was not provided using bindTooltip()</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>Data</strong></p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="options" tabindex="-1">options? <a class="header-anchor" href="#options" aria-label="Permalink to &quot;options?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>options</strong>: <code>L.TooltipOptions</code></p></blockquote><h3 id="content" tabindex="-1">content? <a class="header-anchor" href="#content" aria-label="Permalink to &quot;content?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>content</strong>: <code>L.Content</code> | (<code>d</code>) =&gt; <code>L.Content</code></p></blockquote>',12)]))}const f=e(n,[["render",l]]);export{b as __pageData,f as default};
